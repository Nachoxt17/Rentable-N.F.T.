{
  "address": "0x14b2A8895a9a721543b1cE9bB1cfb346efd5c483",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_price",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_scale",
          "type": "uint256"
        }
      ],
      "name": "unpackPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc21e89d6c9b34d5aa228cf83b9720487277d11f6e53ab1583b8865a40b36cf3e",
  "receipt": {
    "to": null,
    "from": "0x4F8645e873Af2355afD7E971736D6056c1758aBF",
    "contractAddress": "0x14b2A8895a9a721543b1cE9bB1cfb346efd5c483",
    "transactionIndex": 10,
    "gasUsed": "180637",
    "logsBloom": "0x
    "blockHash": "0x1395dcaa2be997bded6f1142d1cd04fcc844b2538e9ad0f328669ec14daaa5bd",
    "transactionHash": "0xc21e89d6c9b34d5aa228cf83b9720487277d11f6e53ab1583b8865a40b36cf3e",
    "logs": [],
    "blockNumber": 10530767,
    "cumulativeGasUsed": "1358181",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ef9feb358e48aa5496b5d1e42dc73eaf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_price\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"unpackPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"unpackPrice(bytes4,uint256)\":{\"details\":\"for tests only. this must be exact replica of the one in ReNft.sol\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Test/Utils.sol\":\"Utils\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Test/Utils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.6;\\n\\ncontract Utils {\\n    /// @dev for tests only. this must be exact replica of the one in\\n    /// ReNft.sol\\n    function unpackPrice(bytes4 _price, uint256 _scale)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        ensureIsUnpackablePrice(_price, _scale);\\n\\n        // whole := if _price is 0x00120034, then whole is uint16(0x0012)\\n        // decimal := uin16(0x0034)\\n        // we only support dp4 precision for decimals. i.e. you can only have\\n        // numerals after the decimal place ABCD.wxyz. e.g. 1.8271\\n        // 1.8271 represents amount in the default scale of the payment token\\n        // i.e. if .decimals() of the ERC20 is 6, then 1.8271 * (10 ** 6)\\n        uint16 whole = uint16(bytes2(_price));\\n        uint16 decimal = uint16(bytes2(_price << 16));\\n        uint256 decimalScale = _scale / 10000;\\n\\n        if (whole > 9999) {\\n            whole = 9999;\\n        }\\n        if (decimal > 9999) {\\n            decimal = 9999;\\n        }\\n\\n        uint256 w = whole * _scale;\\n        uint256 d = decimal * decimalScale;\\n        uint256 price = w + d;\\n\\n        return price;\\n    }\\n\\n    function ensureIsUnpackablePrice(bytes4 _price, uint256 _scale)\\n        private\\n        pure\\n    {\\n        require(uint32(_price) > 0, \\\"invalid price\\\");\\n        require(_scale >= 10000, \\\"invalid scale\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x32eb2d2623e5b2cbef1729e33a5bad5423c2569a2009453d00ba609723ea19e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061024e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637ff0f20e14610030575b600080fd5b61004361003e366004610170565b610055565b60405190815260200160405180910390f35b600061006183836100e4565b60f083901c61ffff60e085901c16600061007d612710866101c1565b905061270f8361ffff1611156100935761270f92505b61270f8261ffff1611156100a75761270f91505b60006100b78661ffff86166101e3565b905060006100c98361ffff86166101e3565b905060006100d782846101a9565b9998505050505050505050565b60e082901c61012a5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b60448201526064015b60405180910390fd5b61271081101561016c5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964207363616c6560981b6044820152606401610121565b5050565b6000806040838503121561018357600080fd5b82356001600160e01b03198116811461019b57600080fd5b946020939093013593505050565b600082198211156101bc576101bc610202565b500190565b6000826101de57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156101fd576101fd610202565b500290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122080be3d4e5d1ec840917e18651d3e1756a8b609edf617e04cc39a47070d198d7064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80637ff0f20e14610030575b600080fd5b61004361003e366004610170565b610055565b60405190815260200160405180910390f35b600061006183836100e4565b60f083901c61ffff60e085901c16600061007d612710866101c1565b905061270f8361ffff1611156100935761270f92505b61270f8261ffff1611156100a75761270f91505b60006100b78661ffff86166101e3565b905060006100c98361ffff86166101e3565b905060006100d782846101a9565b9998505050505050505050565b60e082901c61012a5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b60448201526064015b60405180910390fd5b61271081101561016c5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964207363616c6560981b6044820152606401610121565b5050565b6000806040838503121561018357600080fd5b82356001600160e01b03198116811461019b57600080fd5b946020939093013593505050565b600082198211156101bc576101bc610202565b500190565b6000826101de57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156101fd576101fd610202565b500290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122080be3d4e5d1ec840917e18651d3e1756a8b609edf617e04cc39a47070d198d7064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "unpackPrice(bytes4,uint256)": {
        "details": "for tests only. this must be exact replica of the one in ReNft.sol"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}